var assert = require("assert");
var _ = require("../lib/under_score");

function BaseType() {
    this.b = 1;
}
BaseType.prototype.get = function() { return this.b; };
_(ChildType).inherites(BaseType);
function ChildType() {
    this.parent.constructor.call(this);
    this.c = 3;
}
var c = new ChildType();
assert.equal(c.b, 1);
assert.equal(c instanceof ChildType, true);
assert.equal(c instanceof BaseType, true);

assert.equal( _([1,2]).chain().append([3,4]).compare([1,2,3,4]).value(), 0  );
assert.equal( _([1,2]).chain().append(3).compare([1,2,3]).value(), 0  );

assert.equal(_('a').multiply(0), '');
assert.equal(_('a').multiply(3), 'aaa');

assert.equal(_([1,2,3]).multiply(0).length, 0);
assert.equal(_([1,2,3]).multiply(3).length, 9);

assert.equal( _([1,2,3]).chain().multiply(2).compare([1,2,3,1,2,3]).value(), 0);

assert.equal(_('abc').compare('abc'), 0);
assert.equal(_('abc').compare('bc'), -1);

assert.equal(_('abc').cut(1), 'ab');
assert.equal(_('abc').cut(-1), 'bc');
assert.equal( _([1,2,3]).chain().cut(1).compare([1,2]).value(), 0);
assert.equal( _([1,2,3]).chain().cut(-1).compare([2,3]).value(), 0);

assert.equal(_(' abc').trim(), 'abc');
assert.equal(_(' abc  ').trim(), 'abc');
assert.equal(_('abc  ').trim(), 'abc');
assert.equal(_('--abc').trim('-'), 'abc');
assert.equal(_('\/abc//\\').trim('\\/'), 'abc');
assert.equal(_('abc--').trim('-'), 'abc');

assert.equal(_('  too    many spaces   here').prettySentence(), 'too many spaces here');

assert.equal(_('who-are-you-2').camelCase(), 'whoAreYou-2');
assert.equal(_('WhoAreYou2').hyphenate(), 'who-are-you2');

assert.equal(_('my.doc').endsWith('.doc'), true);
assert.equal(_('my.doc').endsWith('.do'), false);

assert.equal(_('voodoo').count('o'), 4);
assert.equal(_('voodoo').count('oo'), 2);
assert.equal(_('v').count('v'), 1);

assert.equal(_('%s is back').format('joe'), 'joe is back');
assert.equal(_('joe is %5s').format('him'), 'joe is   him');
assert.equal(_('joe is %5d').format(100), 'joe is   100');
assert.equal(_('joe is %05d').format(100), 'joe is 00100');
assert.equal(_('joe is %-5d').format(100), 'joe is 100  ');

assert.equal(_('joe is %-5d').format(100), 'joe is 100  ');

assert.equal(_(61).prettyMinutes(), "01:01");
assert.equal(_(61).prettyMinutes(true), "+01:01");
assert.equal(_(-61).prettyMinutes(false), "01:01");
assert.equal(_(-61).prettyMinutes(true), "-01:01");

assert.equal(_("/p/a/t/h/file.ext").dirname(), "/p/a/t/h");
assert.equal(_("/p/a/t/h/").dirname(), "/p/a/t/h");
assert.equal(_("/p/a/t/h/file.ext").basename(), "file.ext");
assert.equal(_("/p/a/t/h/file.ext").basename('.ext'), "file");
assert.equal(_("/p/a/t/h/file.ext").extname(), ".ext");
assert.equal(_("file.ext").extname(), ".ext");
assert.equal(_("/p/a/t/h/file.").extname(), ".");
assert.equal(_("/p/a/t/h/file").extname(), "");

assert.equal(_("p").pathjoin('a'), "p/a");
assert.equal(_("/p").pathjoin('a'), "/p/a");

assert.equal(_("http://host:10/a/b/c/../../e").pathResolve(), "http://host:10/a/e");
assert.equal(_.pathResolve("http://host:10/", "/a/b/c", "../", "/..", "e"), "http://host:10/a/e");
assert.equal(_.pathResolve("c:\\a\\b\\c", ".\\..\\", "e"), "c:/a/b/e");
assert.equal(_.pathResolve("c:\\a\\b\\c", "..\\.\\", "e"), "c:/a/b/e");
assert.equal(_.pathResolve("\\a\\b\\c", "..\\.\\", "e"), "/a/b/e");
assert.equal(_.pathResolve("\\a\\b\\c", "..", "\\.\\", "e"), "/a/b/e");
assert.equal(_("http://host:10/a/b/c/../../e/a.html").pathResolve(), "http://host:10/a/e/a.html");
assert.equal(_("http://host:10/a/b/c/./../e/a.html").pathResolve(), "http://host:10/a/b/e/a.html");
assert.equal(_("http://host:10/a/b/c/./../e.x/a.html").pathResolve(), "http://host:10/a/b/e.x/a.html");
assert.equal(_.pathResolve("\\a\\b\\c", "..", "\\.\\", "e\\"), "/a/b/e/");

assert.equal(_(__dirname).chain().pathResolve().endsWith("test").value(), true);
assert.equal(_(__dirname).chain().pathResolve().endsWith("test").value(), true);
assert.equal(_("test_under_score.js").chain().pathResolve().endsWith("test_under_score.js").value(), true);

assert.equal(_({a: 1, b: 2}).pick( function(v,k) { return k=='a';}).a, 1);

assert.equal(_({a: 1, b: 2}).pickKeys(['a']).a, 1);
assert.equal(_({a: 1, b: 2}).pickKeys({a: ''}).a, 1);


assert.equal(_.typeConvert("1", 2), "2");
assert.equal(_.typeConvert(1, "2"), 2);
assert.equal(_.typeConvert(true, ""), false);
assert.equal(_.typeConvert(true, "2"), true );
assert.equal(_.typeConvert("", true), "true" );
assert.equal(_.typeConvert([], ""), "" );
assert.equal(_.typeConvert( {x: 1}, {x: "2"}).x, 2);
assert.equal(_.typeConvert( {xs: [1]}, {xs : ["2"]}).xs[0], 2);
assert.equal(_.typeConvert( {xs: 1}, {xs : ["2"]}).xs[0], "2");
assert.equal(_.typeConvert( [ {xs: 1} ], [ {xs: "2"} ] )[0].xs, 2);
assert.equal(_.typeConvert( {x: 1}, {xs: "2"}).xs, undefined);
assert.equal(_.typeConvert( {x: 1}, {xs: "2"}, true).xs, "2");

assert.equal(_.typeCheck( {x: 1}, {x: 2} ), null);
assert.equal(_.typeCheck( {x: 1}, {x: '2'} ), { x: 'type-mismatch: expect number but was string' }.toString());
assert.equal(_.typeCheck( {x: 1}, {} ), { x:'missing'}.toString());
assert.equal(_.typeCheck( {x: 1, y: 2}, {} ), { x:'missing', y:'missing'}.toString());

// test recursion check
assert.equal(_.typeCheck( {x: 1, o : { y: 2} }, {x: 2, o: 's'} ), {o: 'type-mismatch: expect object but was string'}.toString());
assert.equal(_.typeCheck( {x: 1, o : { y: 2} }, {x: 2, o: {} } ), {o: { y: 'missing'}}.toString());
assert.equal(_.typeCheck( {x: 1, o : { y: 2} }, {x: 2, o: {y: '2'} } ), {o:{y:'type-mismatch: expect number but was string'}}.toString());
assert.equal(_.typeCheck( {x: 1, o : { y: 2} }, {x: 2, o: {y: 1} } ), null);

// nextTick
//console.log(_.timeIt( function() { var n = 0; for (var i=0; i<100000000; i++) { n += i/2;}} ));

console.log("If you see nothing above, all test cases passed");