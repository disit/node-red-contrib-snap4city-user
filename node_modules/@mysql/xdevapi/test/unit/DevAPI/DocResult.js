'use strict';

/* eslint-env node, mocha */

const expect = require('chai').expect;
const docResult = require('../../../lib/DevAPI/DocResult');

describe('DocResult', () => {
    context('fetchAll()', () => {
        it('returns an empty array when there are no items in the result-set', () => {
            expect(docResult().fetchAll()).to.deep.equal([]);
            expect(docResult({ results: undefined }).fetchAll()).to.deep.equal([]);
            expect(docResult({ results: [] }).fetchAll()).to.deep.equal([]);
            expect(docResult({ results: [[]] }).fetchAll()).to.deep.equal([]);
        });

        it('returns an array containing all items in the result-set', () => {
            const expected = [{ name: 'foo' }, { name: 'bar' }];

            expect(docResult({ results: [[[expected[0]], [expected[1]]]] }).fetchAll()).to.deep.equal(expected);
        });
    });

    context('fetchOne()', () => {
        it('returns undefined when there are no items in the result-set', () => {
            /* eslint-disable no-unused-expressions */
            expect(docResult().fetchOne()).to.not.exist;
            expect(docResult({ results: undefined }).fetchOne()).to.not.exist;
            expect(docResult({ results: [] }).fetchOne()).to.not.exist;
            /* eslint-enable no-unused-expressions */
            return expect(docResult({ results: [[]] }).fetchOne()).to.not.exist;
        });

        it('returns the next available item in the result-set', () => {
            expect(docResult({ results: [[[{ name: 'foo' }]]] }).fetchOne()).to.deep.equal({ name: 'foo' });
        });
    });

    context('getWarnings()', () => {
        it('returns the list of warnings generated by the server for a given operation', () => {
            const warnings = ['foo', 'bar'];

            expect(docResult({ warnings }).getWarnings()).to.deep.equal(warnings);
        });
    });

    context('getWarningsCount()', () => {
        it('returns the number of warnings generated by the server for a given operation', () => {
            const warnings = ['foo', 'bar', 'baz'];

            expect(docResult({ warnings }).getWarningsCount()).to.deep.equal(3);
        });
    });
});
